{1,
{10,
{"Собственная сборка",1,0,"",""},
{0,
{"История изменений",0,0,"","#Область 2021_13_06
// + шаблон Методы и атрибуты -> Управляющие -> Описание типов
#КонецОбласти 

#Область 2020_12_15
// + шаблон Методы и атрибуты -> Фоновые задания -> Длительная операция БСП
#КонецОбласти 

#Область 2020_01_04
// + шаблон Структура модуля объекта -> Структура модуля объекта 8.3 (расш.)
// + шаблон Структура модуля объекта -> Процедуры и функции -> Обработка заполнения
// + шаблон Структура модуля объекта -> Процедуры и функции -> Обработка проверки заполнения
// + шаблон Структура модуля формы -> Структура модуля формы 8.3 (расш)
#КонецОбласти 

#Область 2016_12_03
// + шаблон Структура модуля формы -> Процедуры и функции -> Инициализация формы
// * группа Структура модуля формы -> Процедуры и функции
#КонецОбласти 

#Область 2016_09_24
// + шаблон Структура модуля формы -> Копия объекта (8.х) с обновленной схемой
// * шаблон Структура модуля формы -> Устаревшее -> Копия объекта (без рекв формы)
#КонецОбласти 

#Область 2016_05_21
// + в шаблоны со областями добавлена установка курсора
// * в шаблонах раздела Раскладка клавиатуры добавлена установка курсора
#КонецОбласти

#Область 2016_05_18
// + раздел Структура модуля формы, переименованы текущие шаблоны, добавлена автозамена
// + раздел Структура модуля объекта, переименованы текущие шаблоны, добавлена автозамена
// + раздел Структура модуля менеджера, переименованы текущие шаблоны, добавлена автозамена
#КонецОбласти

#Область 2016_05_14
// + шаблон Управляещие -> Процедура (с исправлениями)
// + шаблон Управляещие -> Функция (с исправлениями)
// + шаблон ОписаниеОповещения
// + шаблон Обл[асть] для блоков в 8.3
#КонецОбласти

#Область 2016_05_01
// + шаблон Описание методов -> Описание функции
// + шаблон Описание методов -> Описание процедуры
#КонецОбласти "}
},
{7,
{"Структура модуля формы",1,0,"",""},
{0,
{"Структура модуля формы 8.2",0,0,"Модуль[Формы82]","////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ФОРМОЙ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА КОМАНД ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
"}
},
{0,
{"Структура модуля формы 8.3",0,0,"Модуль[Формы83]","
#Область УправлениеФормой
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИмяТаблицы
#КонецОбласти

#Область ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиКомандФормы
#КонецОбласти

#Область ЗавершениеНемодальныхВызовов
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Раздел
#КонецОбласти

"}
},
{0,
{"Структура модуля формы 8.3 (расш)",0,0,"Модуль[Формы83]","
#Область УправлениеФормой

&НаСервере
Процедура ИнициализацияФормы()
	
	СоздатьКопиюОбъектаНаСервере(ЭтотОбъект);
	
	// прочие обработки
	<?>
	
	СнятьКопиюОбъекта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьУсловноеОформлениеФормы(Форма)
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, ИмяРеквизита)

	Если НЕ Обработано.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Обработано.Добавить(ИмяРеквизита);

	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;

	#Область Наборы
	
	//Если ИмяРеквизита = ""Реквизиты"" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
	//	УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, """");
	//	УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, """");
	//КонецЕсли;

	#КонецОбласти
	
	#Область Элементы
	
	//Если ИмяРеквизита = ""Ответственный"" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
	//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	//		""Ответственный"", ""ТолькоПросмотр"", ЗначениеЗаполнено(Объект.Ответственный));
	//КонецЕсли;

	#КонецОбласти 
	
	#Область ТабЧасть_Имя
	
	//Если ИмяРеквизита = ""ИмяТабличнойЧастиОтветственный"" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
	//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	//		""ИмяТабличнойЧастиОтветственный"", ""ТолькоПросмотр"", ЗначениеЗаполнено(Объект.Ответственный));
	//КонецЕсли;

	#КонецОбласти
	
	#Область Команды
	
	//Если ИмяРеквизита = ""КомандаЗаполнить"" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
	//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	//		""ТаблицаФормыЗаполнить"", ""Видимость"", НЕ Объект.Проведен);
	//КонецЕсли;

	#КонецОбласти 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьУсловноеОформление(Форма, ИменаРеквизитов = """")
	Если ТипЗнч(ИменаРеквизитов) = Тип(""Строка"") Тогда
		Если ПустаяСтрока(ИменаРеквизитов) Тогда
			МассивИмен = Новый Массив;
			МассивИмен.Добавить("""");
		Иначе
			МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРеквизитов, "","");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИменаРеквизитов) = Тип(""Массив"") Тогда
		МассивИмен = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИменаРеквизитов);
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрТолькоПросмотр = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Форма.Параметры, ""ТолькоПросмотр"", Ложь);
	Если НЕ ПараметрТолькоПросмотр = Истина Тогда
		//Форма.ТолькоПросмотр = (Форма.СостоянияЗаблокировано.Найти(Форма.СведенияОЗаявкеСостояние) <> Неопределено);
	КонецЕсли;

	Обработано = Новый Массив;
	Для Каждого ИмяРеквизита Из МассивИмен Цикл
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, СокрЛП(ИмяРеквизита));
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

//&НаКлиенте
//Процедура ИмяРеквизитаПриИзменении(Элемент)
//	Если СравнитьСКопиейОбъекта(ЭтотОбъект, ""Объект.ИмяРеквизита"") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// прочие обработки
//	
//	СнятьКопиюОбъекта(ЭтотОбъект);
//КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИмяТаблицы
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство(""АвтоТест"") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ИнициализацияФормы();
	КонецЕсли;
	
	УстановитьУсловноеОформлениеФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ИнициализацияФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
#КонецОбласти

#Область ЗавершениеНемодальныхВызовов
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_КопияДанныхФормы

&НаСервереБезКонтекста
Процедура СоздатьКопиюОбъектаНаСервере(Форма)
	МассивРеквизитов = Новый Массив;
	//МассивРеквизитов.Добавить(""Объект.Дата"");
	//МассивРеквизитов.Добавить(""Объект.Организация"");
	
	РаботаСФормамиПТБ.КопияДанныхФормыИнициализация(Форма, МассивРеквизитов);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СнятьКопиюОбъекта(Форма, знач Реквизиты = """")
	Если ПустаяСтрока(Реквизиты) Тогда
		РаботаСФормамиПТБКлиентСервер.КопияДанныхФормыОбновить(Форма);
	Иначе
		РаботаСФормамиПТБКлиентСервер.КопияДанныхФормыОбновитьРеквизиты(Форма, Реквизиты);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция СравнитьСКопиейОбъекта(Форма, ИмяРеквизита)
	Возврат РаботаСФормамиПТБКлиентСервер.КопияДанныхФормыСравнить(Форма, ИмяРеквизита);
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ЗначениеИзКопииОбъекта(Форма, ИмяРеквизита)
	Возврат РаботаСФормамиПТБКлиентСервер.КопияДанныхФормыПолучить(Форма, ИмяРеквизита);
КонецФункции

#КонецОбласти 
"}
},
{5,
{"Предопределенные блоки (8.2)",1,0,"",""},
{0,
{"Блок ""Управление формой""",0,0,"","////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ФОРМОЙ
"}
},
{0,
{"Блок ""Обработка событий элементов формы""",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
"}
},
{0,
{"Блок ""Обработка событий формы""",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ ФОРМЫ
"}
},
{0,
{"Блок ""Обработка команд формы""",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА КОМАНД ФОРМЫ
"}
},
{0,
{"Блок ""Служебные процедуры и функции""",0,0,"","////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
"}
}
},
{7,
{"Предопределенные блоки (8.3)",1,0,"",""},
{0,
{"Область ""Управление формой""",0,0,"Обла[сть]","#Область УправлениеФормой

<?>

#КонецОбласти
"}
},
{0,
{"Область ""Обработчики событий элементов шапки формы""",0,0,"Обла[сть]","#Область ОбработчикиСобытийЭлементовШапкиФормы

<?>

#КонецОбласти
"}
},
{0,
{"Область ""Обработчики событий элементов таблицы формы""",0,0,"Обла[сть]","#Область ОбработчикиСобытийЭлементовТаблицыФормы_<?""Имя таблицы формы"">

<?>

#КонецОбласти
"}
},
{0,
{"Область ""Обработчики событий формы""",0,0,"Обла[сть]","#Область ОбработчикиСобытийФормы

<?>

#КонецОбласти
"}
},
{0,
{"Область ""Обработчики команд формы""",0,0,"Обла[сть]","#Область ОбработчикиКомандФормы

<?>

#КонецОбласти
"}
},
{0,
{"Область ""Завершение немодальных вызовов""",0,0,"Обла[сть]","#Область ЗавершениеНемодальныхВызовов

<?>

#КонецОбласти
"}
},
{0,
{"Область ""Служебные процедуры и функции""",0,0,"","#Область СлужебныеПроцедурыИФункции

<?>

#КонецОбласти
"}
}
},
{6,
{"Процедуры и функции",1,0,"",""},
{0,
{"Управление видимостью (8.х)",0,0,"","
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, ИмяРеквизита)

	Если НЕ Обработано.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Обработано.Добавить(ИмяРеквизита);

	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;

	#Область Наборы
	
	//Если ИмяРеквизита = ""Реквизиты"" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
	//	УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, """");
	//	УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, """");
	//КонецЕсли;

	#КонецОбласти
	
	#Область Элементы
	
	//Если ИмяРеквизита = ""Ответственный"" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
	//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	//		""Ответственный"", ""ТолькоПросмотр"", ЗначениеЗаполнено(Объект.Ответственный));
	//КонецЕсли;

	#КонецОбласти 
	
	#Область ТабЧасть_Имя
	
	//Если ИмяРеквизита = ""ИмяТабличнойЧастиОтветственный"" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
	//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	//		""ИмяТабличнойЧастиОтветственный"", ""ТолькоПросмотр"", ЗначениеЗаполнено(Объект.Ответственный));
	//КонецЕсли;

	#КонецОбласти
	
	#Область Команды
	
	//Если ИмяРеквизита = ""КомандаЗаполнить"" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
	//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	//		""ТаблицаФормыЗаполнить"", ""Видимость"", НЕ Объект.Проведен);
	//КонецЕсли;

	#КонецОбласти 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьУсловноеОформление(Форма, ИменаРеквизитов = """")

	Если ТипЗнч(ИменаРеквизитов) = Тип(""Строка"") Тогда
		Если ПустаяСтрока(ИменаРеквизитов) Тогда
			МассивИмен = Новый Массив;
			МассивИмен.Добавить("""");
		Иначе
			МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРеквизитов, "","");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИменаРеквизитов) = Тип(""Массив"") Тогда
		МассивИмен = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИменаРеквизитов);
	Иначе
		Возврат;
	КонецЕсли;
 
	//Форма.ТолькоПросмотр = (Форма.СостоянияЗаблокировано.Найти(Форма.СведенияОЗаявкеСостояние) <> Неопределено);

	Обработано = Новый Массив;
	Для Каждого ИмяРеквизита Из МассивИмен Цикл
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, СокрЛП(ИмяРеквизита));
	КонецЦикла;

КонецПроцедуры"}
},
{0,
{"Копия объекта (8.х)",0,0,"","// Описание использования
//
//	1. Разместить команды из процедуры ИнициализацияФормы в соответствующую по смыслу процедуру формы
//	2. Добавить все сохраняемые реквизиты в процедуре СнятьКопиюОбъекта
//	3. Назначить обработчики ПриИзменении на сохраняемые реквизиты (см. ИмяРеквизитаПриИзменении)
//

&НаСервере
Процедура ИнициализацияФормы()
	
	СоздатьКопиюОбъектаНаСервере(ЭтотОбъект);
	
	// прочие обработки
	<?>
	
	СнятьКопиюОбъекта(ЭтотОбъект);
	
КонецПроцедуры

//&НаКлиенте
//Процедура ИмяРеквизитаПриИзменении(Элемент)
//	Если СравнитьСКопиейОбъекта(ЭтотОбъект, ""Объект.ИмяРеквизита"") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// прочие обработки
//	
//	СнятьКопиюОбъекта(ЭтотОбъект);
//КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_КопияДанныхФормы

&НаСервереБезКонтекста
Процедура СоздатьКопиюОбъектаНаСервере(Форма)
	МассивРеквизитов = Новый Массив;
	//МассивРеквизитов.Добавить(""Объект.Дата"");
	//МассивРеквизитов.Добавить(""Объект.Организация"");
	
	РаботаСФормамиПТБ.КопияДанныхФормыИнициализация(Форма, МассивРеквизитов);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СнятьКопиюОбъекта(Форма, знач Реквизиты = """")
	Если ПустаяСтрока(Реквизиты) Тогда
		РаботаСФормамиПТБКлиентСервер.КопияДанныхФормыОбновить(Форма);
	Иначе
		РаботаСФормамиПТБКлиентСервер.КопияДанныхФормыОбновитьРеквизиты(Форма, Реквизиты);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция СравнитьСКопиейОбъекта(Форма, ИмяРеквизита)
	Возврат РаботаСФормамиПТБКлиентСервер.КопияДанныхФормыСравнить(Форма, ИмяРеквизита);
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ЗначениеИзКопииОбъекта(Форма, ИмяРеквизита)
	Возврат РаботаСФормамиПТБКлиентСервер.КопияДанныхФормыПолучить(Форма, ИмяРеквизита);
КонецФункции

#КонецОбласти 
"}
},
{0,
{"Копия объекта ВНЗМ (8.х)",0,0,"","&НаСервере
Процедура ИнициализацияФормы()
	
	РаботаСФормамиПТБ.СоздатьРеквизитХраненияКопииДанныхФормы(ЭтаФорма);
	
	// прочие обработки
	<?>
	
	СнятьКопиюОбъекта(ЭтаФорма);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_КопияДанныхФормы

&НаКлиентеНаСервереБезКонтекста 
Процедура СнятьКопиюОбъекта(Форма)
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(""Объект.Дата"");
	МассивРеквизитов.Добавить(""Объект.Организация"");
	
	РаботаСФормамиПТБКлиентСервер.СкопироватьДанныеФормы(Форма, МассивРеквизитов);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция СравнитьСКопиейОбъекта(Форма, ИмяРеквизита)
	Возврат РаботаСФормамиПТБКлиентСервер.СравнитьСКопиейДанныхФормы(Форма, ИмяРеквизита);
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ЗначениеИзКопииОбъекта(Форма, ИмяРеквизита)
	Возврат РаботаСФормамиПТБКлиентСервер.ЗначениеИзКопииДанныхФормы(Форма, ИмяРеквизита);
КонецФункции

#КонецОбласти 
"}
},
{0,
{"Инициализация формы (8.х)",0,0,"Иници[ализацияФормы]","&НаСервере
Процедура ИнициализацияФормы()
	<?>
КонецПроцедуры
 "}
},
{0,
{"Очистка табл. части при изменении реквизита",0,0,"","// Описание использования
//
//	1. Для реквизита формы задается обработчик события ПриИзменении (см. ИмяРеквизитаПриИзменении)
//	2. В обработчика ПриИзменении вносятся следующие изменения
//		- Объект.ИмяРеквизита заменить на правильный путь к данным реквизита
//		- ОписаниеОповещения заменить на правильное название обработчика
//		- ПараметрыВыполнения.Текст - изменить текст предупреждения
//	3. Разместить обработчик результата выбора пользователя (см. ВыполнитьОчисткуТабличнойЧастиЗавершение)
//		- Объект.ТабличнаяЧасть заменить на правильный путь к данным табличной части
//	4. Дополнить обработчик оповещения ""ИмяРеквизитаПриИзмененииЗавершение"" по необходимости
// 
// Предполагается использование подсистемы ""КопияОбъекта""
//

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяРеквизитаПриИзменении(Элемент)
	Если СравнитьСКопиейОбъекта(ЭтаФорма, ""Объект.ИмяРеквизита"") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(""ИмяРеквизитаПриИзмененииЗавершение"", ЭтаФорма);
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить(""Реквизиты""			, ""Объект.ИмяРеквизита"");
	ПараметрыВыполнения.Вставить(""Текст""				, НСтр(""ru='При изменении реквизита'""));
	ПараметрыВыполнения.Вставить(""ОписаниеОповещения""	, ОписаниеОповещения);
	ПараметрыВыполнения.Вставить(""СнятьКопиюОбъекта""	, Ложь);
	
	РаботаСФормамиПТБКлиент.ЗадатьВопросОчисткиТабличнойЧасти(ЭтаФорма, Объект.ТабличнаяЧасть, ПараметрыВыполнения);
КонецПроцедуры

#КонецОбласти

#Область ЗавершениеНемодальныхВызовов

&НаКлиенте
Процедура ИмяРеквизитаПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	// обработка после очистки табличной части
	
	СнятьКопиюОбъекта(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОчисткуТабличнойЧастиЗавершение(РезультатВопроса, ПараметрыВыполнения) Экспорт
	// Да		- выполнена очистка
	// Нет		- пользователь отказался или таймаут
	// Отмена	- табличная часть была пустой
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		МассивРеквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыВыполнения.Реквизиты, "","", Истина);
		Для Каждого ПолноеИмяРеквизита Из МассивРеквизиты Цикл
			Если Лев(ПолноеИмяРеквизита, 7) = ""Объект."" Тогда
				ИмяРеквизита		= СтрЗаменить(ПолноеИмяРеквизита, ""Объект."", """");
				ОбластьРеквизита	= Объект;
			Иначе
				ИмяРеквизита		= ПолноеИмяРеквизита;
				ОбластьРеквизита	= ЭтаФорма;
			КонецЕсли;
			
			ОбластьРеквизита[ИмяРеквизита] = ЗначениеИзКопииОбъекта(ЭтаФорма, ПолноеИмяРеквизита);
		КонецЦикла;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда  
		Объект.ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	Если ПараметрыВыполнения.Свойство(""ОписаниеОповещения"") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОписаниеОповещения, РезультатВопроса);
	КонецЕсли;
	
	Если ПараметрыВыполнения.Свойство(""СнятьКопиюОбъекта"") И ПараметрыВыполнения.СнятьКопиюОбъекта Тогда
		СнятьКопиюОбъекта(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

"}
},
{0,
{"Помощник заполнения",0,0,"","
&НаСервере
Процедура ИнициализацияФормы();

	// ПомощникЗаполненияПТБ.Начало
	ПомощникЗаполненияПТБ.ИнициализацияКомпоновщикаНастроек(ЭтотОбъект,
		""ТабличнаяЧастьКомпоновщикНастроек"",
		Документы.ШаблонДокумента.ПолучитьМакет(""СхемаЗаполнениеТабличнойЧасти""),
		Объект.ТабличнаяЧастьОтборXML);
	
	ПомощникЗаполненияПТБ.ДобавитьПолеНастройкиОтбора(ЭтотОбъект, ""ТабличнаяЧастьКомпоновщикНастроек"", ""ГруппаТабличнаяЧастьНастройкаОтбора"");
	// ПомощникЗаполненияПТБ.Конец
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ПомощникЗаполненияПТБ.Начало
	ТекущийОбъект.ТабличнаяЧастьОтборXML = ПомощникЗаполненияПТБ.ПолучитьСтрокуДляСохраненияОтбора(ЭтотОбъект, ""ТабличнаяЧастьКомпоновщикНастроек"");
	// ПомощникЗаполненияПТБ.Конец
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	ВыбранныеПоля = Новый Массив;
	ВыбранныеПоля.Добавить(""Номенклатура"");
	ВыбранныеПоля.Добавить(""Количество"");
	
	НастройкиОтбора = Новый ОтборКомпоновкиДанных;
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиОтбора,
	//	""Банк.Город"", ""Г. УФА"", ВидСравненияКомпоновкиДанных.Равно);
	
	НастройкиПорядок = Новый Соответствие;
	НастройкиПорядок.Вставить(""Номенклатура.Наименование"", ""ВОЗР"");
	
	// ПомощникЗаполненияПТБ.Начало
	ТаблицаДанных = ПомощникЗаполненияПТБ.ПолучитьТаблицуЗаполнения(ЭтотОбъект,
		""ТабличнаяЧастьКомпоновщикНастроек"",
		ВыбранныеПоля,,
		НастройкиОтбора,
		НастройкиПорядок);
	// ПомощникЗаполненияПТБ.Конец
		
	Объект.ТабличнаяЧасть.Очистить();
	Объект.ТабличнаяЧасть.Загрузить(ТаблицаДанных);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_ПТБ_БСП

// ПомощникЗаполненияПТБ.Начало
&НаКлиенте
Процедура Подключаемый_ПомощникЗаполненияОтборНажатие(Элемент, СтандартнаяОбработка)
	
	ЗапрещенныеПоля = Новый Массив;
	ЗапрещенныеПоля.Добавить(""Номенклатура.Код"");
	
	ПомощникЗаполненияПТБКлиент.ПомощникЗаполненияОтборНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка, ЗапрещенныеПоля);
	
КонецПроцедуры
// ПомощникЗаполненияПТБ.Конец

#КонецОбласти


"}
}
},
{1,
{"Устаревшее",1,0,"",""},
{0,
{"Копия объекта (без рекв формы)",0,0,"","&НаКлиентеНаСервереБезКонтекста 
Процедура СнятьКопиюОбъекта(Форма)
	РаботаСФормамиПТБКлиентСервер.СкопироватьДанныеФормы(Форма, ""Дата, Организация"", ""КопияОбъекта"");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция СравнитьСКопиейОбъекта(Форма, ИмяРеквизита)
	Возврат РаботаСФормамиПТБКлиентСервер.СравнитьСКопиейДанныхФормы(Форма, ИмяРеквизита, ""КопияОбъекта"");
КонецФункции

"}
}
}
},
{7,
{"Структура модуля объекта",1,0,"",""},
{0,
{"Структура модуля объекта 8.2",0,0,"Модуль[Объекта82]","////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ДВИЖЕНИЙ ДОКУМЕНТА

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
"}
},
{0,
{"Структура модуля объекта 8.3",0,0,"Модуль[Объекта83]","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
#КонецОбласти

#Область ОбработчикиПроведения
#КонецОбласти

#Область ОбработчикиСобытий
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#КонецОбласти

#КонецЕсли"}
},
{0,
{"Структура модуля объекта 8.3 (расш.)",0,0,"Модуль[Объекта83]","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьПоОбъектуОснованию(ОбъектОснование) Экспорт
	ТипОбъектОснование = ТипЗнч(ОбъектОснование);
	
	//Если ТипОбъектОснование = Тип(""ДокументСсылка.ЗаявкаНаОплату"") Тогда
	//	ЗаполнитьПоДокументуЗаявкаНаОплату(ОбъектОснование);
	//Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр(""ru='Заполнение по объекту """"%1"""" невозможно. Обратитесь к администратору'""),
			Строка(ОбъектОснование));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	//КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПроведения
#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	// Заполнение ""по умолчанию""
	Если ЭтотОбъект.Ссылка.Пустая() Тогда
		//ЭтотОбъект.Владелец = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	// Заполнение на основании или по данным переданной структуры
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип(""Структура"")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоОбъектуОснованию(ДанныеЗаполнения);		
	Иначе
		Если ТипДанныхЗаполнения = Тип(""Структура"") Тогда
			ОбщегоНазначенияПТБ.ЗаполнитьПоСтруктуре(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	// дополнительная обработка заполнения
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	УдаляемыеРеквизиты = Новый Массив;
	
	//Если ЭтотОбъект.ПоУмолчанию Тогда
	//	УдаляемыеРеквизиты.Добавить(""ДатаНачала"");
	//КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, УдаляемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#КонецОбласти

#КонецЕсли"}
},
{0,
{"Структура модуля объекта 8.3 (бизнес-процесс)",0,0,"Модуль[Объекта83]","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
#КонецОбласти

#Область ОбработчикиСобытийКартыМаршрута
#КонецОбласти

#Область ОбработчикиСобытий
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#КонецОбласти

#КонецЕсли"}
},
{4,
{"Предопределенные блоки (8.2)",1,0,"",""},
{0,
{"Блок ""Программный интерфейс""",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

"}
},
{0,
{"Блок ""Формирование движений""",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ДВИЖЕНИЙ ДОКУМЕНТА

"}
},
{0,
{"Блок ""События модуля""",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ МОДУЛЯ

"}
},
{0,
{"Блок ""Служебные процедуры и функции""",0,0,"","////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
"}
}
},
{6,
{"Предопределенные блоки (8.3)",1,0,"",""},
{0,
{"Область ""Программный интерфейс""",0,0,"Обла[сть]","#Область ПрограммныйИнтерфейс

<?>

#КонецОбласти
"}
},
{0,
{"Область ""Обработчики событий карты маршрута""",0,0,"Обла[сть]","#Область ОбработчикиСобытийКартыМаршрута

<?>

#КонецОбласти
"}
},
{0,
{"Область ""Обработчики проведения""",0,0,"Обла[сть]","#Область ОбработчикиПроведения

<?>

#КонецОбласти
"}
},
{0,
{"Область ""Обработчики событий модуля""",0,0,"Обла[сть]","#Область ОбработчикиСобытийМодуля

<?>

#КонецОбласти
"}
},
{0,
{"Область ""Служебный программный интерфейс""",0,0,"Обла[сть]","#Область СлужебныйПрограммныйИнтерфейс

<?>

#КонецОбласти
"}
},
{0,
{"Область ""Служебные процедуры и функции""",0,0,"Обла[сть]","#Область СлужебныеПроцедурыИФункции

<?>

#КонецОбласти
"}
}
},
{2,
{"Процедуры и функции",1,0,"",""},
{0,
{"Обработка заполнения",0,0,"ОбработкаЗ[аполнения]","
Процедура ЗаполнитьПоОбъектуОснованию(ОбъектОснование) Экспорт
	ТипОбъектОснование = ТипЗнч(ОбъектОснование);
	
	//Если ТипОбъектОснование = Тип(""ДокументСсылка.ЗаявкаНаОплату"") Тогда
	//	ЗаполнитьПоДокументуЗаявкаНаОплату(ОбъектОснование);
	//Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр(""ru='Заполнение по объекту """"%1"""" невозможно. Обратитесь к администратору'""),
			Строка(ОбъектОснование));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	//КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	// Заполнение ""по умолчанию""
	Если ЭтотОбъект.Ссылка.Пустая() Тогда
		//ЭтотОбъект.Пользователь		= Пользователи.ТекущийПользователь();
		//ЭтотОбъект.СпособСоздания	= Перечисления.СпособыСозданияУведомленияОбОтсутствии.Приложение1С;
	КонецЕсли;
	
	// Заполнение на основании или по данным переданной структуры
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип(""Структура"")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоОбъектуОснованию(ДанныеЗаполнения);		
	Иначе
		Если ТипДанныхЗаполнения = Тип(""Структура"") Тогда
			ОбщегоНазначенияПТБ.ЗаполнитьПоСтруктуре(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	// дополнительная обработка заполнения
	
КонецПроцедуры

"}
},
{0,
{"Обработка проверки заполнения",0,0,"ОбработкаП[роверкиЗаполнения]","
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	УдаляемыеРеквизиты = Новый Массив;
	
	//Если ЭтотОбъект.ПоУмолчанию Тогда
	//	УдаляемыеРеквизиты.Добавить(""ДатаНачала"");
	//	УдаляемыеРеквизиты.Добавить(""ДатаОкончания"");
	//КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, УдаляемыеРеквизиты);
	
КонецПроцедуры

"}
}
}
},
{4,
{"Структура модуля менеджера",1,0,"",""},
{0,
{"Структура модуля менеджера 8.2",0,0,"Модуль[Менеджера82]","////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
"}
},
{0,
{"Структура модуля менеджера 8.3",0,0,"Модуль[Менеджера83]","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
#КонецОбласти

#Область ОбработчикиСобытий
#КонецОбласти

#Область ОбработкаПроведения
#КонецОбласти

#Область ОбновлениеИнформационнойБазы
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#КонецОбласти

#Область Печать
#КонецОбласти

#КонецЕсли"}
},
{4,
{"Предопределенные блоки (8.2)",1,0,"",""},
{0,
{"Блок ""Программный интерфейс""",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

"}
},
{0,
{"Блок ""Обновление информационной базы""",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ
"}
},
{0,
{"Блок ""Служебные процедуры и функции""",0,0,"","////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
"}
},
{0,
{"Блок ""Подготовка параметров проведения документа""",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

"}
}
},
{7,
{"Предопределенные блоки (8.3)",1,0,"",""},
{0,
{"Область ""Программный интерфейс""",0,0,"","#Область ПрограммныйИнтерфейс

<?>

#КонецОбласти"}
},
{0,
{"Область ""Обработчики событий""",0,0,"","#Область ОбработчикиСобытий

<?>

#КонецОбласти
"}
},
{0,
{"Область ""Обновление информационной базы""",0,0,"Обла[сть]","#Область ОбновлениеИнформационнойБазы

<?>

#КонецОбласти
"}
},
{0,
{"Область ""Интернет сервис""",0,0,"Обла[сть]","#Область ИнтернетСервис

<?>

#КонецОбласти
"}
},
{0,
{"Область ""Обработка проведения""",0,0,"Обла[сть]","#Область ОбработкаПроведения

<?>

#КонецОбласти
"}
},
{0,
{"Область ""Служебный программный интерфейс""",0,0,"Обла[сть]","#Область СлужебныйПрограммныйИнтерфейс

<?>

#КонецОбласти
"}
},
{0,
{"Область ""Служебные процедуры и функции""",0,0,"","#Область СлужебныеПроцедурыИФункции

<?>

#КонецОбласти
"}
}
}
},
{2,
{"Структура модуля команды",1,0,"",""},
{0,
{"Структура модуля команды",0,0,"Модуль[Команды]","
#Область ОбработчикиСобытий
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#КонецОбласти
"}
},
{2,
{"Предопределенные блоки",1,0,"",""},
{0,
{"Область ""Обработчики событий""",0,0,"Обла[сть]","#Область ОбработчикиСобытий

<?>

#КонецОбласти
"}
},
{0,
{"Область ""Служебные процедуры и функции""",0,0,"Обла[сть]","#Область СлужебныеПроцедурыИФункции

<?>

#КонецОбласти
"}
}
}
},
{4,
{"Комментарии пользователя",1,0,"",""},
{0,
{"Открыть комментарий изменений",0,0,"начало","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., <?""Введите задание на разработку"">, НАЧАЛО"}
},
{0,
{"Закрыть комментарий изменений",0,0,"конец","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., <?""Введите задание на разработку"">, КОНЕЦ"}
},
{0,
{"Комментарий изменений",0,1,"изменено","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., <?""Введите задание на разработку"">, НАЧАЛО
// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., <?""Введите задание на разработку"">, КОНЕЦ
"}
},
{0,
{"Комментарий модуля",0,0,"","// <?""Начало раздела: введите название нового раздела с большой буквы"">
// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., <?""Введите задание на разработку"">
 "}
}
},
{10,
{"ПТБ",1,0,"",""},
{0,
{"Комментарий изменений (тек. пункт)",0,0,"1085","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., п.1085, НАЧАЛО
<?>
// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., п.1085, КОНЕЦ"}
},
{4,
{"Без задания",1,0,"",""},
{0,
{"Открыть комментарий изменений",0,0,"","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., ПТБ, НАЧАЛО"}
},
{0,
{"Закрыть комментарий изменений",0,0,"","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., ПТБ, КОНЕЦ"}
},
{0,
{"Комментарий изменений (ПТБ)",0,0,"","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., ПТБ, НАЧАЛО
// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., ПТБ, КОНЕЦ
"}
},
{0,
{"Комментарий модуля",0,0,"","// ООО ""ПрогТехБизнес""
// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., ПТБ
"}
}
},
{4,
{"2Д-ТЗ-57",1,0,"",""},
{0,
{"Открыть комментарий изменений",0,0,"","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., 2Д-ТЗ-57, НАЧАЛО"}
},
{0,
{"Закрыть комментарий изменений",0,0,"","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., 2Д-ТЗ-57, КОНЕЦ"}
},
{0,
{"Комментарий изменений (ТЗ)",0,0,"изменено","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., 2Д-ТЗ-57, НАЧАЛО
// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., 2Д-ТЗ-57, КОНЕЦ
"}
},
{0,
{"Комментарий модуля",0,0,"","// ООО ""ПрогТехБизнес""
// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., 2Д-ТЗ-57
 "}
}
},
{4,
{"2Д-РЗ-967",1,0,"",""},
{0,
{"Открыть комментарий изменений",0,0,"","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., 2Д-РЗ-967, НАЧАЛО"}
},
{0,
{"Закрыть комментарий изменений",0,0,"","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., 2Д-РЗ-967, КОНЕЦ"}
},
{0,
{"Комментарий изменений (РЗ)",0,0,"967","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., 2Д-РЗ-967, НАЧАЛО
<?>
// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., 2Д-РЗ-967, КОНЕЦ"}
},
{0,
{"Комментарий модуля",0,0,"","// ООО ""ПрогТехБизнес""
// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., 2Д-РЗ-967
"}
}
},
{4,
{"п.5270",1,0,"",""},
{0,
{"Открыть комментарий изменений",0,0,"","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., п.5270, НАЧАЛО"}
},
{0,
{"Закрыть комментарий изменений",0,0,"","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., п.5270, КОНЕЦ"}
},
{0,
{"Комментарий изменений (п)",0,0,"5270","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., п.5270, НАЧАЛО
<?>
// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., п.5270, КОНЕЦ"}
},
{0,
{"Комментарий модуля",0,0,"","// ООО ""ПрогТехБизнес""
// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., п.5270
<?>"}
}
},
{4,
{"п.ХХХХ",1,0,"",""},
{0,
{"Открыть комментарий изменений",0,0,"","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., п.ХХХХ, НАЧАЛО"}
},
{0,
{"Закрыть комментарий изменений",0,0,"","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., п.ХХХХ, КОНЕЦ"}
},
{0,
{"Комментарий изменений (п)",0,0,"ХХХХ","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., п.ХХХХ, НАЧАЛО
// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., п.ХХХХ, КОНЕЦ
"}
},
{0,
{"Комментарий модуля",0,0,"","// ООО ""ПрогТехБизнес""
// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., п.ХХХХ
 "}
}
},
{4,
{"База знаний",1,0,"",""},
{0,
{"Открыть комментарий изменений",0,0,"","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., БазаЗнаний, НАЧАЛО"}
},
{0,
{"Закрыть комментарий изменений",0,0,"","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., БазаЗнаний, КОНЕЦ"}
},
{0,
{"Комментарий изменений (ПТБ)",0,0,"","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., БазаЗнаний, НАЧАЛО
// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., БазаЗнаний, КОНЕЦ
"}
},
{0,
{"Комментарий модуля",0,0,"","// ООО ""ПрогТехБизнес""
// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., БазаЗнаний
"}
}
},
{5,
{"п.9999",1,0,"",""},
{0,
{"Открыть комментарий изменений",0,0,"","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., п.9999, НАЧАЛО
<?>"}
},
{0,
{"Закрыть комментарий изменений",0,0,"","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., п.9999, КОНЕЦ
<?>"}
},
{0,
{"Комментарий изменений (п)",0,0,"9999","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., п.9999, НАЧАЛО
<?>
// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., п.9999, КОНЕЦ"}
},
{0,
{"Комментарий модуля",0,0,"","// ООО ""ПрогТехБизнес""
// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., п.9999
<?>"}
},
{0,
{"Не поддерживается веб-клиент",0,0,"","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., п.9999, НАЧАЛО
#Если ВебКлиент Тогда
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(""ru='Работа веб-клиента не поддерживается. Обратитесь к разработчику.'"")); 
	Возврат;
#КонецЕсли 
// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., п.9999, КОНЕЦ
<?>"}
}
},
{1,
{"УМТР",1,0,"",""},
{0,
{"Структура модуля формы 8.3",0,0,"УМТР.[МодульФормы83]","
#Область УправлениеФормой

&НаСервере
Процедура ИнициализацияФормы()
	
	РаботаСФормами.СоздатьРеквизитХраненияКопииДанныхФормы(ЭтаФорма);
	
	// прочие обработки
	<?>
	
	СнятьКопиюОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, ИмяРеквизита)

	Если НЕ Обработано.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Обработано.Добавить(ИмяРеквизита);

	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;

	// Наборы элементов
	Если ИмяРеквизита = ""Реквизиты"" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, """");
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, """");
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, """");
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, """");
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, """");
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, """");
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, """");
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, """");
	КонецЕсли;

	// Элементы
	Если ИмяРеквизита = ""Ответственный"" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			""Ответственный"", ""ТолькоПросмотр"", ЗначениеЗаполнено(Объект.Ответственный));
	КонецЕсли;

	// Команды
	Если ИмяРеквизита = ""КомандаЗаполнить"" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			""ТаблицаФормыЗаполнить"", ""Видимость"", НЕ Объект.Проведен);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьУсловноеОформление(Форма, ИменаРеквизитов = """")

	Если ТипЗнч(ИменаРеквизитов) = Тип(""Строка"") Тогда
		Если ПустаяСтрока(ИменаРеквизитов) Тогда
			МассивИмен = Новый Массив;
			МассивИмен.Добавить("""");
		Иначе
			МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРеквизитов, "","");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИменаРеквизитов) = Тип(""Массив"") Тогда
		МассивИмен = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИменаРеквизитов);
	Иначе
		Возврат;
	КонецЕсли;
 
	//Форма.ТолькоПросмотр = (Форма.СостоянияЗаблокировано.Найти(Форма.СведенияОЗаявкеСостояние) <> Неопределено);

	Обработано = Новый Массив;
	Для Каждого ИмяРеквизита Из МассивИмен Цикл
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, СокрЛП(ИмяРеквизита));
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство(""АвтоТест"") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() Тогда
		ИнициализацияФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьУсловноеОформление(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ИнициализацияФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИмя
#КонецОбласти

#Область ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиКомандФормы
#КонецОбласти

#Область ЗавершениеНемодальныхВызовов
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КопияДанныхФормы

&НаКлиентеНаСервереБезКонтекста 
Процедура СнятьКопиюОбъекта(Форма)
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(""Объект.Дата"");
	МассивРеквизитов.Добавить(""Объект.Организация"");
	
	РаботаСФормамиКлиентСервер.СкопироватьДанныеФормы(Форма, МассивРеквизитов);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция СравнитьСКопиейОбъекта(Форма, ИмяРеквизита)
	Возврат РаботаСФормамиКлиентСервер.СравнитьСКопиейДанныхФормы(Форма, ИмяРеквизита);
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ЗначениеИзКопииОбъекта(Форма, ИмяРеквизита)
	Возврат РаботаСФормамиКлиентСервер.ЗначениеИзКопииДанныхФормы(Форма, ИмяРеквизита);
КонецФункции

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_БСП



#КонецОбласти
 "}
}
},
{4,
{"АСУП",1,0,"",""},
{0,
{"Открыть комментарий изменений",0,0,"","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., АСУП, НАЧАЛО
<?>"}
},
{0,
{"Закрыть комментарий изменений",0,0,"","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., АСУП, КОНЕЦ
<?>"}
},
{0,
{"Комментарий изменений (п)",0,0,"АСУП","// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., АСУП, НАЧАЛО
<?>
// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., АСУП, КОНЕЦ
"}
},
{0,
{"Комментарий модуля",0,0,"","// ООО ""ПрогТехБизнес""
// <? ДатаВремя, ""ДЛФ=D"">, Анисков А.А., АСУП
<?>"}
}
}
},
{13,
{"Методы и атрибуты",1,0,"",""},
{15,
{"Управляющие",1,0,"",""},
{0,
{"Если",0,0,"Есл[и]","Если <?> Тогда
	
КонецЕсли;"}
},
{0,
{"ИначеЕсли",0,0,"ИначеЕ[сли]","ИначеЕсли <?> Тогда"}
},
{0,
{"Для",0,0,"Для","Для <?> По  Цикл
	
КонецЦикла;"}
},
{0,
{"Для каждого",0,0,"Для[ Каждого]","Для Каждого <?> Из  Цикл
	
КонецЦикла;"}
},
{0,
{"Попытка",0,0,"Попы[тка]","Попытка
	<?>
Исключение
	//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
КонецПопытки;"}
},
{0,
{"?(,,)",0,0,"?([)]","?(<?>,,)"}
},
{0,
{"Возврат",0,0,"Воз[вра]т","Возврат <?>;"}
},
{0,
{"Экспорт",0,0,"Экс[пор]т","Экспорт;<?>"}
},
{0,
{"Продолжить",0,0,"Про[должит]ь","Продолжить;"}
},
{0,
{"Прервать",0,0,"Пре[рват]ь","Прервать;<?>"}
},
{0,
{"Директива компиляции",0,0,"Дирек[тива]","&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"">"}
},
{0,
{"Инструкция препроцессора",0,0,"Инстр[укция]","#Если <?""Выберите инструкцию препроцессора"", ВыборВарианта, ""Сервер"", ""Сервер"", ""Клиент"", ""Клиент"", ""ТонкийКлиент"", ""ТонкийКлиент"", ""ВебКлиент"", ""ВебКлиент"", ""ВнешнееСоединение"", ""ВнешнееСоединение"", ""ТолстыйКлиентУправляемоеПриложение"", ""ТолстыйКлиентУправляемоеПриложение"", ""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентОбычноеПриложение""> Тогда
	<?>
#КонецЕсли"}
},
{7,
{"Процедура",1,0,"",""},
{0,
{"Процедура",0,0,"Проц[едура]","Процедура <?>()
		
КонецПроцедуры
"}
},
{0,
{"Процедура с заголовком",0,0,"Процедура","// Описание
//
// Параметры:
//	Параметр1 - ТипВид - описание параметра
//		* описание колонок, ключей
//	Параметр2 - ТипВид - Описание параметра
//
Процедура <?""Введите имя процедуры"">()
    <?>
КонецПроцедуры

"}
},
{0,
{"Процедура НаКлиенте",0,0,"Проц[едура]","&НаКлиенте
Процедура <?>()
	
КонецПроцедуры
"}
},
{0,
{"Процедура НаСервереБезКонтекста",0,0,"Проц[едура]","&НаСервереБезКонтекста
Процедура <?>()

КонецПроцедуры"}
},
{0,
{"Процедура НаСервере",0,0,"Проц[едура]","&НаСервере
Процедура <?>()
	
КонецПроцедуры
"}
},
{0,
{"Процедура НаКлиентеНаСервереБезКонтекста (только модули упр.форм)",0,0,"Проц[едура]","&НаКлиентеНаСервереБезКонтекста
Процедура <?>()
	
КонецПроцедуры
"}
},
{0,
{"Процедура НаКлиентеНаСервере (только модули команд)",0,0,"Проц[едура]","&НаКлиентеНаСервере
Процедура <?>()
	
КонецПроцедуры
"}
}
},
{7,
{"Функция",1,0,"",""},
{0,
{"Функция",0,0,"Функ[ция]","Функция <?>()
		
КонецФункции
"}
},
{0,
{"Функция с заголовком",0,0,"Функция","// Описание
//
// Параметры:
//	Параметр1 - ТипВид - описание параметра
//		* описание колонок, ключей
//	Параметр2 - ТипВид - Описание параметра
//
// Возвращаемое значение:
//   ТипВид - описание возвращаемого значения
//
Функция <?""Введите имя функции"">()
    <?>
КонецФункции
"}
},
{0,
{"Функция НаКлиенте",0,0,"Функ[ция]","&НаКлиенте
Функция <?>()
	
КонецФункции
"}
},
{0,
{"Функция НаСервереБезКонтекста",0,0,"Функ[ция]","&НаСервереБезКонтекста
Функция <?>()
	
КонецФункции
"}
},
{0,
{"Функция НаСервере",0,0,"Функ[ция]","&НаСервере
Функция <?>()
	
КонецФункции
"}
},
{0,
{"Функция НаКлиентеНаСервереБезКонтекста (только модули упр.форм)",0,0,"Функ[ция]","&НаКлиентеНаСервереБезКонтекста
Функция <?>()
	
КонецФункции"}
},
{0,
{"Функция НаКлиентеНаСервере (только модули команд)",0,0,"Функ[ция]","&НаКлиентеНаСервере
Функция <?>()
	
КонецФункции"}
}
},
{0,
{"Описание типов",0,0,"Описание[Типов(]","ОписаниеТипов(""<?"""", ВыборТипа>"")<?>
"}
}
},
{8,
{"Прочие",1,0,"",""},
{0,
{"Формат",0,0,"Фор[мат]","Формат(<?>, ""<?, ФорматнаяСтрока>"")"}
},
{0,
{"Конструктор описания типов",0,1,"","<?""Конструктор описания типов"", КонструкторОписанияТипов>"}
},
{0,
{"Проверка типа",0,1,"","Если ТипЗнч(<?""Выражение для проверки типа"">) = Тип(""<?""Выберите тип"", ВыборТипа>"") Тогда

	<?>

КонецЕсли;"}
},
{0,
{"Шрифт",0,0,"Шрифт[=]","Шрифт = Новый Шрифт(<?>);"}
},
{0,
{"Выборка",0,0,"Выборка=","Выборка = <?>.Выбрать();
Пока Выборка.Следующий() Цикл

КонецЦикла; "}
},
{0,
{"ЧислоПрописью",0,0,"Число[Прописью]","ЧислоПрописью(<?>,,""рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2"")"}
},
{0,
{"НСтр",0,0,"НСт[р(]","НСтр(""ru='<?>'"")"}
},
{0,
{"Описание оповещения",0,0,"Описание[Оповещения]","ПараметрыОповещения = Новый Структура;

ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Укажите имя процедуры оповещения (без пробелов)"">"", ЭтотОбъект, ПараметрыОповещения);

<?>
//&НаКлиенте
//Процедура <?""Укажите имя процедуры оповещения (без пробелов)"">(Результат, ДопПараметры) Экспорт	
//	
//КонецПроцедуры

"}
}
},
{8,
{"Коллекции",1,0,"",""},
{0,
{"Таблица значений",0,0,"ТаблицаЗ[начений=]","ТаблицаЗначений = Новый ТаблицаЗначений;
<?>"}
},
{0,
{"Список значений",0,0,"СписокЗ[начений=]","СписокЗначений = Новый СписокЗначений;
<?>"}
},
{0,
{"Структура",0,0,"Струк[тура=]","Структура = Новый Структура;
<?>"}
},
{0,
{"Соответствие",0,0,"Соотве[тствие=]","Соответствие = Новый Соответствие;
<?>"}
},
{0,
{"ДеревоЗначений",0,0,"ДеревоЗ[начений=]","ДеревоЗначений = Новый ДеревоЗначений;
<?>"}
},
{0,
{"Массив",0,0,"Мас[сив=]","Массив = Новый Массив(<?>);"}
},
{0,
{"Добавить колонку",0,0,"Колонки.[Добавить]","Колонки.Добавить(""<?>"");"}
},
{0,
{"Новая cтрока",0,0,"Нов[аяСтро]ка","НоваяСтрока = <?>.Добавить();"}
}
},
{14,
{"Запросы",1,0,"",""},
{0,
{"Выборка обход",0,0,"Выб[орка=]","Выборка = <?>.Выбрать();
Пока Выборка.Следующий() Цикл

КонецЦикла; "}
},
{0,
{"Запрос с конструктором",0,0,"Зап[рос=]","Запрос = Новый Запрос;
Запрос.УстановитьПараметр("""", <?>);
Запрос.Текст = 
""<?"""", ТекстЗапроса>"";

РезультатЗапроса = Запрос.Выполнить();
"}
},
{0,
{"Запрос вручную",0,0,"Зап[рос=]","Запрос = Новый Запрос;
Запрос.УстановитьПараметр("""",);

ТекстЗапроса = ""
|ВЫБРАТЬ
|   <?>
|
|"";

Запрос.Текст = ТекстЗапроса;
РезультатЗапроса = Запрос.Выполнить();"}
},
{0,
{"ВЫБОР",0,0,"ВЫБОР","ВЫБОР КОГДА <?> ТОГДА ИНАЧЕ КОНЕЦ"}
},
{0,
{"Документ",0,0,"Док[умент.]","Документ.<?"""", ОбъектМетаданных, ""Документ"", ""Документ.ТабличнаяЧасть"">"}
},
{0,
{"Справочник",0,0,"Спр[авочник.]","Справочник.<?"""", ОбъектМетаданных, ""Справочник"", ""Справочник.ТабличнаяЧасть"">"}
},
{0,
{"Перечисление",0,0,"Переч[исление.]","Перечисление.<?"""", ОбъектМетаданных, ""Перечисление"">"}
},
{0,
{"РегистрСведений",0,0,"Рег[истрСведений.]","РегистрСведений.<?"""", ОбъектМетаданных, ""РегистрСведений""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""СрезПервых"", "".СрезПервых(<?>)"", ""СрезПоследних"", "".СрехПоследних(<?>)"">"}
},
{0,
{"РегистрНакопления",0,0,"Рег[истрНакопления.]","РегистрНакопления.<?"""", ОбъектМетаданных, ""РегистрНакопления""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""Остатки"", "".Остатки(<?>)"", ""Обороты"", "".Обороты(<?>)"", ""ОстаткиИОбороты"", "".ОстаткиИОбороты(<?>)"">"}
},
{0,
{"РегистрБухгалтерии",0,0,"Рег[истрБухгалтерии.]","РегистрБухгалтерии.<?"""", ОбъектМетаданных, ""РегистрБухгалтерии""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""Субконто"", "".Субконто"", ""ДвиженияССубконто"", "".ДвиженияССубконто(<?>)"", ""Остатки"", "".Остатки(<?>)"", ""Обороты"", "".Обороты(<?>)"", ""ОстаткиИОбороты"", "".ОстаткиИОбороты(<?>)"", ""ОборотыДтКт"", "".ОборотыДтКт(<?>)"">"}
},
{0,
{"РегистрРасчета",0,0,"Рег[истрРасчета.]","РегистрРасчета.<?"""", ОбъектМетаданных, ""РегистрРасчета"", ""РегистрРасчета.Перерасчет"">"}
},
{0,
{"ЛЕВОЕ СОЕДИНЕНИЕ",0,0,"ЛЕВОЕ","ЛЕВОЕ СОЕДИНЕНИЕ"}
},
{0,
{"ПРАВОЕ СОЕДИНЕНИЕ",0,0,"ПРАВОЕ","ПРАВОЕ СОЕДИНЕНИЕ"}
},
{0,
{"Установить параметр",0,0,"Устан[овитьПараметр]","УстановитьПараметр(""<?>"",);"}
}
},
{7,
{"Диалоговые",1,0,"",""},
{0,
{"Выбор файла",0,1,"Выб[орФайла=]","ВыборФайла = Новый ДиалогВыбораФайла(<?"""", ВыборВарианта, ""Открытие"", ""РежимДиалогаВыбораФайла.Открытие"", ""Сохранение"", ""РежимДиалогаВыбораФайла.Сохранение"", ""ВыборКаталога"", ""РежимДиалогаВыбораФайла.ВыборКаталога"">);
ВыборФайла.ПолноеИмяФайла = <?>;
Если Не ВыборФайла.Выбрать() Тогда
	Возврат;		
КонецЕсли;"}
},
{2,
{"Предупреждение",1,0,"",""},
{0,
{"Показать предупреждение",0,0,"ПоказатьПр[едупреждение]","ПоказатьПредупреждение(, НСтр(""ru='<?>'""), 60);"}
},
{0,
{"Показать предупреждение с оповещением",0,0,"ПоказатьПр[едупреждение]","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры обработчика"">"", ЭтотОбъект);
ПоказатьПредупреждение(ОписаниеОповещения, НСтр(""ru='<?>'""), 60);

//&НаКлиенте
//Процедура <?""Имя процедуры обработчика"">(ПараметрыВыполнения) Экспорт
//	
//КонецПроцедуры
"}
}
},
{4,
{"Вопрос",1,0,"",""},
{0,
{"Вопрос (асинх)",0,0,"Воп[росАсинх]","Ответ = Ждать ВопросАсинх(НСтр(""ru='<?""Текст вопроса"">'""),
	<?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);
<?>
"}
},
{0,
{"Вопрос (модальный)",0,0,"Воп[рос]","Ответ = Вопрос(НСтр(""ru='<?""Текст вопроса"">'""), <?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);
<?>"}
},
{0,
{"Показать вопрос",0,0,"ПоказатьВо[прос]","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры обработчика"">"", ЭтотОбъект);
ПоказатьВопрос(ОписаниеОповещения, НСтр(""ru='<?""Текст вопроса"">'""), <?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);

<?> 
//&НаКлиенте
//Процедура <?""Имя процедуры обработчика"">(РезультатВопроса, ПараметрыВыполнения) Экспорт
//	
//КонецПроцедуры
"}
},
{0,
{"Ответ = Вопрос (асинх)",0,0,"Ответ[=]","Ответ = Ждать ВопросАсинх(НСтр(""ru='<?""Текст вопроса"">'""),
	<?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);
<?>"}
}
},
{1,
{"Помещение файла",1,0,"",""},
{0,
{"Поместить файл",0,0,"НачатьПо[мещениеФайла]","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры обработчика"">"", ЭтотОбъект);
НачатьПомещениеФайла(ОписаниеОповещения, , ,Истина, УникальныйИдентификатор);

<?>
//&НаКлиенте
//Процедура <?""Имя процедуры обработчика"">(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
//	
//КонецПроцедуры
"}
}
},
{0,
{"Показать значение",0,0,"ПоказатьЗн[ачение]","ПоказатьЗначение(, <?>);"}
},
{0,
{"Показать оповещение",0,0,"Опов[ещение]","ПоказатьОповещениеПользователя(<?>);"}
},
{0,
{"Состояние",0,0,"Сос[тояние(]","Состояние(<?>);"}
}
},
{2,
{"Табличный документ",1,0,"",""},
{0,
{"ПолучитьОбласть",0,0,"Обл[асть=]","Область<?""Название области""> = <?>.ПолучитьОбласть(""<?""Название области"">"");"}
},
{0,
{"Макет",0,0,"Мак[ет=]","Макет = ПолучитьМакет(<?>);"}
}
},
{18,
{"Препроцессор",1,0,"",""},
{0,
{"#Если",0,0,"№Ес[ли]","#Если <?"""", ВыборВарианта, ""Клиент"", ""Клиент"", ""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентУправляемоеПриложение"", ""ТолстыйКлиентУправляемоеПриложение"", ""ТонкийКлиент"", ""ТонкийКлиент"", ""Сервер"", ""Сервер"", ""ВнешнееСоединение"", ""ВнешнееСоединение"", ""ВебКлиент"", ""ВебКлиент""> Тогда
    <?> 	
#КонецЕсли"}
},
{0,
{"#Если",0,0,"#Ес[ли]","#Если <?"""", ВыборВарианта, ""Клиент"", ""Клиент"", ""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентУправляемоеПриложение"", ""ТолстыйКлиентУправляемоеПриложение"", ""ТонкийКлиент"", ""ТонкийКлиент"", ""Сервер"", ""Сервер"", ""ВнешнееСоединение"", ""ВнешнееСоединение"", ""ВебКлиент"", ""ВебКлиент""> Тогда
    <?> 	
#КонецЕсли"}
},
{0,
{"#КонецЕсли",0,0,"№Ко[нецЕсли]","#КонецЕсли
<?>"}
},
{0,
{"#КонецЕсли",0,0,"#Ко[нецЕсли]","#КонецЕсли
<?>"}
},
{0,
{"#УдалениеВставка",0,0,"№Удал[ение]","#Удаление
#КонецУдаления

#Вставка
#КонецВставки"}
},
{0,
{"#УдалениеВставка",0,0,"#Удал[ение]","#Удаление
#КонецУдаления

#Вставка
#КонецВставки"}
},
{0,
{"#Удаление",0,0,"№Удал[ение]","#Удаление
#КонецУдаления"}
},
{0,
{"#Удаление",0,0,"#Удал[ение]","#Удаление
#КонецУдаления"}
},
{0,
{"#Вставка",0,0,"№Вста[вка]","#Вставка
#КонецВставки"}
},
{0,
{"#Вставка",0,0,"#Вста[вка]","#Вставка
#КонецВставки"}
},
{0,
{"&НаКлиенте",0,0,"_НаКли[енте]","&НаКлиенте"}
},
{0,
{"&НаСервере",0,0,"_НаСер[вере]","&НаСервере"}
},
{0,
{"&НаСервереБезКонтекста",0,0,"_НаСер[вереБезКонтекста]","&НаСервереБезКонтекста"}
},
{0,
{"&НаКлиентеНаСервереБезКонтекста",0,0,"_НаКли[ентеНаСервереБезКонтекста]","&НаКлиентеНаСервереБезКонтекста"}
},
{0,
{"&НаКлиенте",0,0,"?НаКли[енте]","&НаКлиенте"}
},
{0,
{"&НаСервере",0,0,"?НаСер[вере]","&НаСервере"}
},
{0,
{"&НаСервереБезКонтекста",0,0,"?НаСер[вереБезКонтекста]","&НаСервереБезКонтекста"}
},
{0,
{"&НаКлиентеНаСервереБезКонтекста",0,0,"?НаКли[ентеНаСервереБезКонтекста]","&НаКлиентеНаСервереБезКонтекста"}
}
},
{17,
{"Раскладка клавиатуры",1,0,"",""},
{0,
{"WebЦвета",0,0,"Цуи[Цвета]","WebЦвета.<?>"}
},
{0,
{"HTTPЗапрос",0,0,"РЕЕЗ[Запрос]","HTTPЗапрос<?>"}
},
{0,
{"HTTPОтвет",0,0,"РЕЕЗ[Ответ]","HTTPОтвет<?>"}
},
{0,
{"HTTPСервисОтвет",0,0,"РЕЕЗ[СервисОтвет]","HTTPСервисОтвет<?>"}
},
{0,
{"HTTPСоединение",0,0,"РЕЕЗ[Соединение]","HTTPСоединение<?>"}
},
{0,
{"HTTPСервисы",0,0,"РЕЕЗ[Сервисы]","HTTPСервисы.<?>"}
},
{0,
{"WebСервисы",0,0,"Цуи[Сервисы]","WebСервисы.<?>"}
},
{0,
{"WSСсылки",0,0,"ЦЫ[Ссылки]","WSСсылки.<?>"}
},
{0,
{"<",0,0,"Б","<"}
},
{0,
{">",0,0,"Ю",">"}
},
{0,
{"<>",0,0,"БЮ","<>"}
},
{0,
{">=",0,0,"Ю=",">="}
},
{0,
{"<=",0,0,"Б=","<="}
},
{0,
{"NULL",0,0,"тгдд","NULL"}
},
{0,
{"ЕстьNULL",0,0,"ЕстьТгдд","ЕСТЬNULL(<?>"}
},
{0,
{"[]",0,0,"хъ","[<?>]"}
},
{0,
{"|",0,0,"\ ","|  <?>"}
}
},
{4,
{"Прикладные",1,0,"",""},
{0,
{"ВыборСчетаДт",0,0,"СчетДт=","СчетДт = <?"""", ПланСчетовПредопределенныеДанные>;"}
},
{0,
{"ВыборСчетаКт",0,0,"СчетКт=","СчетКт = <?"""", ПланСчетовПредопределенныеДанные>;"}
},
{0,
{"СубконтоДт",0,0,"СубконтоДт","СубконтоДт[<?"""", ПланВидовХарактеристикПредопределенныеДанные>] = <?>;"}
},
{0,
{"СубконтоКт",0,0,"СубконтоКт","СубконтоКт[<?"""", ПланВидовХарактеристикПредопределенныеДанные>] = <?>;"}
}
},
{4,
{"НаборЗаписей",1,0,"",""},
{0,
{"Регистр сведений",0,0,"НаборЗап[исей=]","НаборЗаписей = РегистрыСведений.<?"""", РегистрСведений>.СоздатьНаборЗаписей();
"}
},
{0,
{"Регистр накопления",0,0,"НаборЗап[исей=]","НаборЗаписей = РегистрыНакопления.<?"""", РегистрНакопления>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
},
{0,
{"Регистр бухгалтерии",0,0,"НаборЗап[исей=]","НаборЗаписей = РегистрыБухгалтерии.<?"""", РегистрБухгалтерии>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
},
{0,
{"Регистр расчета",0,0,"НаборЗап[исей=]","НаборЗаписей = РегистрыРасчета.<?"""", РегистрРасчета>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
}
},
{1,
{"Области",1,0,"",""},
{0,
{"Область (произвольная)",0,0,"Обла[сть]","#Область <?""Имя области (без пробелов)"">

#КонецОбласти"}
}
},
{2,
{"СКД",1,0,"",""},
{0,
{"В таблицу значений",0,0,"","// Инициализация таблицы значений
ТаблицаДанных = Новый ТаблицаЗначений;

// Получение СКД и выполнение отчета
СКД = ПолучитьМакет(""ИмяМакета"");
Настройки = СКД.НастройкиПоУмолчанию;

// Параметры вывода
Настройки.ПараметрыВывода.УстановитьЗначениеПараметра(""ИмяПараметра"", Неопределено);

// Параметры данных
Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(""ИмяПараметра"", Неопределено);

//СКД
Компоновщик = Новый КомпоновщикМакетаКомпоновкиДанных;
МакетКомпоновки = Компоновщик.Выполнить(СКД, Настройки, , , Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));

ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);

ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
ПроцессорВывода.УстановитьОбъект(ТаблицаДанных);
ПроцессорВывода.Вывести(ПроцессорКомпоновки);
"}
},
{0,
{"В табличный документ",0,0,"","// Инициализация таблицы значений
ТабличныйДокумент = Новый ТабличныйДокумент;

// Получение СКД и выполнение отчета
СКД = ПолучитьМакет(""ИмяМакета"");
Настройки = СКД.НастройкиПоУмолчанию;

// Параметры вывода
Настройки.ПараметрыВывода.УстановитьЗначениеПараметра(""ИмяПараметра"", Неопределено);

// Параметры данных
Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(""ИмяПараметра"", Неопределено);

//СКД
Компоновщик = Новый КомпоновщикМакетаКомпоновкиДанных;
МакетКомпоновки = Компоновщик.Выполнить(СКД, Настройки, , , Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));

ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);

ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
"}
}
},
{1,
{"Фоновые задания",1,0,"",""},
{0,
{"Длительная операция БСП",0,0,"Длит[ельнаяОперация]","&НаКлиенте
Процедура <?""Имя процедуры длительной операции"">ВФонеЗавершение(Результат, ДопПараметры) Экспорт	
	Если НЕ ТипЗнч(Результат) = Тип(""Структура"") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = ""Ошибка"" Тогда
		ТекстСообщения = СтрШаблон(НСтр(""ru='При выполнении операции произошла ошибка:
			|%1;
			|%2'""),
			Результат.КраткоеПредставлениеОшибки,
			Результат.ПодробноеПредставлениеОшибки);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	КонецЕсли;
	
	Если НЕ Результат.Статус = ""Выполнено"" Тогда
		Возврат;
	КонецЕсли;
	
	//ДанныеРезультата = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	ПоказатьОповещениеПользователя(НСтр(""ru='Операция завершена'""),,
		НСтр(""ru='Длительная операция выполнена'""),
		БиблиотекаКартинок.Успешно32);
КонецПроцедуры

&НаКлиенте 
Процедура <?""Имя процедуры длительной операции"">ВФонеНаКлиенте()
	ПараметрыПроцедуры = Новый Структура;
	
	ДлительнаяОперация = <?""Имя процедуры длительной операции"">ВФонеНаСервере(ЭтотОбъект.УникальныйИдентификатор,
		ПараметрыПроцедуры);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры длительной операции"">ВФонеЗавершение"", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения				= НСтр(""ru='Длительная операция...'"");
	ПараметрыОжидания.ВыводитьОкноОжидания			= Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения	= Истина;
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ОписаниеОповещения,
		ПараметрыОжидания);
КонецПроцедуры

&НаСервереБезКонтекста 
Функция <?""Имя процедуры длительной операции"">ВФонеНаСервере(знач ИдентификаторФормы, знач ПараметрыПроцедуры, знач РежимОтладки = Ложь)
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.ЗапуститьВФоне		= НЕ РежимОтладки;
	ПараметрыВыполнения.ЗапуститьНеВФоне	= РежимОтладки;
	<?>
	Возврат ДлительныеОперации.ВыполнитьВФоне(""ИмяДлительнойОперации"",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
КонецФункции


"}
}
}
},
{2,
{"Описание методов",1,0,"",""},
{0,
{"Описание функции",0,1,"Описание[Функции]","// Описание
//
// Параметры:
//	Параметр1 - ТипВид - описание параметра
//		* описание колонок, ключей
//	Параметр2 - ТипВид - Описание параметра
//
// Возвращаемое значение:
//   ТипВид - описание возвращаемого значения
//"}
},
{0,
{"Описание процедуры",0,1,"Описание[Процедуры]","// Описание
//
// Параметры:
//	Параметр1 - ТипВид - описание параметра
//		* описание колонок, ключей
//	Параметр2 - ТипВид - Описание параметра
//"}
}
},
{1,
{"Помогаторы",1,0,"",""},
{2,
{"Confluence",1,0,"",""},
{0,
{"Общие модули",0,0,"сщта[дгутсу]","<?""Общий модуль"", ВыборВарианта,
	""confluence_ApiClientServer"", ""confluence_ApiClientServer"",
	""confluence_ApiClientServerReuse"", ""confluence_ApiClientServerReuse"">.<?>"}
},
{0,
{"Общие модули",0,0,"conf[luence]","<?""Общий модуль"", ВыборВарианта,
	""confluence_ApiClientServer"", ""confluence_ApiClientServer"",
	""confluence_ApiClientServerReuse"", ""confluence_ApiClientServerReuse"">.<?>"}
}
}
}
}
}